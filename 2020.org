#+TITLE: 2020 challenge
#+AUTHOR: Advent of code
#+EMAIL: nazar@autistici.org
#+LANGUAGE: en
#+OPTIONS: toc:nil
* DONE Day 1.1

After saving Christmas  five years in a row, you've  decided to take a
vacation at a nice resort on a tropical island. Surely, Christmas will
go on without you.

The   tropical  island   has  its   own  currency   and  is   entirely
cash-only.  The gold  coins  used there  have a  little  picture of  a
starfish;  the locals  just  call  them stars.  None  of the  currency
exchanges seem to have heard of them, but somehow, you'll need to find
fifty of these coins by the time you arrive so you can pay the deposit
on your room.

To save  your vacation, you  need to get  all fifty stars  by December
25th.

Collect stars by  solving puzzles. Two puzzles will  be made available
on each day in the Advent calendar; the second puzzle is unlocked when
you complete the first. Each puzzle grants one star. Good luck!

Before you  leave, the Elves in  accounting just need you  to fix your
expense report (your puzzle  input); apparently, something isn't quite
adding up.

Specifically, they need  you to find the two entries  that sum to 2020
and then multiply those two numbers together.

For example, suppose your expense report contained the following:
#+begin_example
1721
979
366
299
675
1456
#+end_example

In  this   list,  the  two   entries  that   sum  to  2020   are  1721
and 299.  Multiplying them together produces  1721 * 299 =  514579, so
the correct answer is 514579.

Of course,  your expense report is  much larger. Find the  two entries
that sum to 2020; what do you get if you multiply them together?

#+begin_src fennel :session day01 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))

(local test-input ["1721" "979" "366" "299" "675" "1456"])

(fn solve [input]
  (let [xx (tonumber (aoc.first input))
        xs (aoc.rest input)
        res (lume.filter xs (fn [a] (= 2020 (+ (tonumber a) xx))))]
    (if (aoc.empty? res)
        (solve xs)
        (* xx (tonumber (. res 1))))))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 514579 test-input)

(solve (aoc.string-from "2020/01.inp"))
#+end_src

#+RESULTS:
: 63616

* DONE Day 1.2

The Elves in  accounting are thankful for your help;  one of them even
offers  you  a   starfish  coin  they  had  left  over   from  a  past
vacation. They offer you a second one if you can find three numbers in
your expense report that meet the same criteria.

Using the above example again, the  three entries that sum to 2020 are
979,   366,  and   675.   Multiplying  them   together  produces   the
answer, 241861950.

In your expense report, what is  the product of the three entries that
sum to 2020?

#+begin_src fennel :session day01 :exports both
(fn solve2 [input]
  (var res nil)
  (for [i 1 (length input) &until res]
    (for [j i (length input) &until res]
      (for [k j (length input) &until res]
        (let [ii (tonumber (. input i))
              jj (tonumber (. input j))
              kk (tonumber (. input k))]
          (when (= 2020 (+ ii jj kk))
            (set res (* ii jj kk)))))))
  res)

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 241861950 test-input)

(solve2 (aoc.string-from "2020/01.inp"))
#+end_src

#+RESULTS:
: 67877784
