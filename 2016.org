#+TITLE: 2016 challenge
#+AUTHOR: Advent of code
#+EMAIL: nazar@autistici.org
#+LANGUAGE: en
#+OPTIONS: toc:nil

* DONE Day 1.1

Santa's  sleigh  uses  a  very   high-precision  clock  to  guide  its
movements,   and    the   clock's    oscillator   is    regulated   by
stars.  Unfortunately, the  stars have  been stolen...  by the  Easter
Bunny. To save Christmas, Santa needs  you to retrieve all fifty stars
by December 25th.

Collect stars by  solving puzzles. Two puzzles will  be made available
on each day in the Advent calendar; the second puzzle is unlocked when
you complete the first. Each puzzle grants one star. Good luck!

You're   airdropped  near   Easter  Bunny   Headquarters  in   a  city
somewhere. "Near",  unfortunately, is as  close as  you can get  - the
instructions  on  the  Easter  Bunny  Recruiting  Document  the  Elves
intercepted start here, and nobody had time to work them out further.

The Document indicates that you  should start at the given coordinates
(where  you just  landed) and  face North.  Then, follow  the provided
sequence: either  turn left  (L) or  right (R)  90 degrees,  then walk
forward the given number of blocks, ending at a new intersection.

There's  no  time to  follow  such  ridiculous instructions  on  foot,
though, so you take a moment  and work out the destination. Given that
you can  only walk  on the  street grid of  the city,  how far  is the
shortest path to the destination?

For example:
- Following R2, L3 leaves you 2 blocks East and 3 blocks North, or 5
  blocks away.
- R2, R2, R2 leaves you 2 blocks due South of your starting position,
  which is 2 blocks away.
- R5, L5, R5, R3 leaves you 12 blocks away.

How many blocks away is Easter Bunny HQ?

#+begin_src fennel :session day01 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))

(fn solve [input]
  (var x 0)
  (var y 0)
  (let [steps (aoc.string-split (. input 1) ", ")]
    (each [_ step (ipairs steps)]
      (let [D (string.sub step 1 1)
            d (string.sub step 2)]
        (if (= "R" D)
            (let [y1 (- y)]
              (set y x)
              (set x y1))
            (let [x1 (- x)]
              (set x y)
              (set y x1)))
        (set x (+ (tonumber d) x)))))
  (aoc.manhattan-dist [x y] [0 0]))

(fn test [expected input]
  (assert (= expected (solve [input]))))

(test 5 "R2, L3")
(test 2 "R2, R2, R2")
(test 12 "R5, L5, R5, R3")

(solve (aoc.string-from "2016/01.inp"))
#+end_src

#+RESULTS:
: 161


* DONE Day 1.2

Then,  you  notice  the  instructions  continue on  the  back  of  the
Recruiting Document. Easter Bunny HQ is actually at the first location
you visit twice.

For  example, if  your  instructions are  R8, R4,  R4,  R8, the  first
location you visit twice is 4 blocks away, due East.

How many blocks away is the first location you visit twice?

#+begin_src fennel :session day01 :exports both
(fn solve2 [input]
  (var dir (/ math.pi 2))
  (var x 0)
  (var y 0)
  (var done false)
  (let [steps (aoc.string-split (. input 1) ", ")
        res [[0 0]]]
    (each [_ step (ipairs steps) &until done]
      (let [D (string.sub step 1 1)
            d (string.sub step 2)]
        (if (= "R" D)
            (set dir (- dir (/ math.pi 2)))
            (set dir (+ dir (/ math.pi 2))))
        (set x (+ x (* d (lume.round (math.cos dir)))))
        (set y (+ y (* d (lume.round (math.sin dir))))))
      (let [[fx fy] (table.remove res)
            [tx ty] [x y]]
        (if (= fx tx)
            (for [i fy ty (if (< ty fy) -1 1) &until done]
              (if (aoc.matrix-contains? res [x i])
                  (do 
                    (set done true)
                    (set y i))
                  (table.insert res [x i])))
            (for [i fx tx (if (< tx fx) -1 1) &until done]
              (if (aoc.matrix-contains? res [i y])
                  (do 
                    (set done true)
                    (set x i))
                  (table.insert res [i y]))))))
    (+ (math.abs x) (math.abs y))))

(fn test2 [expected input]
  (assert (= expected (solve2 [input]))))

(test2 4 "R8, R4, R4, R8")

(solve2 (aoc.string-from "2016/01.inp"))
#+end_src

#+RESULTS:
: 110

* DONE Day 2.1

You   arrive   at   Easter   Bunny   Headquarters   under   cover   of
darkness. However, you left in such a  rush that you forgot to use the
bathroom! Fancy  office buildings  like this  one usually  have keypad
locks on their bathrooms, so you search the front desk for the code.

"In order to improve security,"  the document you find says, "bathroom
codes will  no longer  be written down.  Instead, please  memorize and
follow the procedure below to access the bathrooms."

The document goes on to explain that  each button to be pressed can be
found  by starting  on  the  previous button  and  moving to  adjacent
buttons on the keypad:  U moves up, D moves down, L  moves left, and R
moves  right. Each  line of  instructions corresponds  to one  button,
starting  at the  previous button  (or, for  the first  line, the  "5"
button); press whatever button you're on at the end of each line. If a
move doesn't lead to a button, ignore it.

You can't hold it much longer, so you decide to figure out the code as
you walk to the bathroom. You picture a keypad like this:

#+begin_example
1 2 3
4 5 6
7 8 9
#+end_example

Suppose your instructions are:

#+begin_example
ULL
RRDDD
LURDL
UUUUD
#+end_example

- You start at "5" and move up (to "2"), left (to "1"), and left (you
  can't, and stay on "1"), so the first button is 1.
- Starting from the previous button ("1"), you move right twice (to
  "3") and then down three times (stopping at "9" after two moves and
  ignoring the third), ending up with 9.
- Continuing from "9", you move left, up, right, down, and left, ending with 8.
- Finally, you move up four times (stopping at "2"), then down once,
  ending with 5.

So, in this example, the bathroom code is 1985.

Your puzzle input  is the instructions from the document  you found at
the front desk. What is the bathroom code?

#+begin_src fennel :session day02 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))

(local test-input
       ["ULL"
        "RRDDD"
        "LURDL"
        "UUUUD"])

(fn solve [input]
  (let [pos {:x 2 :y 2}
        xs (lume.map input #(aoc.string-toarray $))
        keypad [[1 2 3]
               [4 5 6]
               [7 8 9]]
        res []]
    (each [_ ys (ipairs xs)]
      (each [_ x (ipairs ys)]
        (case x
          "U" (tset pos :y (math.max 1 (- (. pos :y) 1)))
          "D" (tset pos :y (math.min 3 (+ 1 (. pos :y))))
          "R" (tset pos :x (math.min 3 (+ 1 (. pos :x))))
          "L" (tset pos :x (math.max 1 (- (. pos :x) 1)))))
      (table.insert res (. (. keypad (. pos :y)) (. pos :x))))
    (table.concat res "")))

(fn test [expected input]
  (assert (= expected (solve input))))

(test "1985" test-input)

(solve (aoc.string-from "2016/02.inp"))
#+end_src

#+RESULTS:
: 35749


* TODO Day 2.2

You finally  arrive at the bathroom  (it's a several minute  walk from
the lobby so  visitors can behold the many fancy  conference rooms and
water coolers on this floor) and go to punch in the code. Much to your
bladder's  dismay,  the  keypad  is  not  at  all  like  you  imagined
it.  Instead,  you are  confronted  with  the  result of  hundreds  of
man-hours of bathroom-keypad-design meetings:

#+begin_example
    1
  2 3 4
5 6 7 8 9
  A B C
    D
#+end_example

You still start at "5" and stop  when you're at an edge, but given the
same instructions as above, the outcome is very different:
- You start at "5" and don't move at all (up and left are both edges),
  ending at 5.
- Continuing  from "5",  you move  right  twice and  down three  times
  (through "6", "7", "B", "D", "D"), ending at D.
- Then, from  "D", you move  five more  times (through "D",  "B", "C",
  "C", "B"), ending at B.
- Finally, after five more moves, you end at 3.

So, given the actual keypad layout,  the code would be =5DB3=. Using the
same instructions in  your puzzle input, what is  the correct bathroom
code?
