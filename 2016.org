#+TITLE: 2016 challenge
#+AUTHOR: Advent of code
#+EMAIL: nazar@autistici.org
#+LANGUAGE: en
#+OPTIONS: toc:nil

* DONE Day 1.1

Santa's  sleigh  uses  a  very   high-precision  clock  to  guide  its
movements,   and    the   clock's    oscillator   is    regulated   by
stars.  Unfortunately, the  stars have  been stolen...  by the  Easter
Bunny. To save Christmas, Santa needs  you to retrieve all fifty stars
by December 25th.

Collect stars by  solving puzzles. Two puzzles will  be made available
on each day in the Advent calendar; the second puzzle is unlocked when
you complete the first. Each puzzle grants one star. Good luck!

You're   airdropped  near   Easter  Bunny   Headquarters  in   a  city
somewhere. "Near",  unfortunately, is as  close as  you can get  - the
instructions  on  the  Easter  Bunny  Recruiting  Document  the  Elves
intercepted start here, and nobody had time to work them out further.

The Document indicates that you  should start at the given coordinates
(where  you just  landed) and  face North.  Then, follow  the provided
sequence: either  turn left  (L) or  right (R)  90 degrees,  then walk
forward the given number of blocks, ending at a new intersection.

There's  no  time to  follow  such  ridiculous instructions  on  foot,
though, so you take a moment  and work out the destination. Given that
you can  only walk  on the  street grid of  the city,  how far  is the
shortest path to the destination?

For example:
- Following R2, L3 leaves you 2 blocks East and 3 blocks North, or 5
  blocks away.
- R2, R2, R2 leaves you 2 blocks due South of your starting position,
  which is 2 blocks away.
- R5, L5, R5, R3 leaves you 12 blocks away.

How many blocks away is Easter Bunny HQ?

#+begin_src fennel :session day01 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))

(fn solve [input]
  (var x 0)
  (var y 0)
  (let [steps (aoc.string-split (. input 1) ", ")]
    (each [_ step (ipairs steps)]
      (let [D (string.sub step 1 1)
            d (string.sub step 2)]
        (if (= "R" D)
            (let [y1 (- y)]
              (set y x)
              (set x y1))
            (let [x1 (- x)]
              (set x y)
              (set y x1)))
        (set x (+ (tonumber d) x)))))
  (aoc.manhattan-dist [x y] [0 0]))

(fn test [expected input]
  (assert (= expected (solve [input]))))

(test 5 "R2, L3")
(test 2 "R2, R2, R2")
(test 12 "R5, L5, R5, R3")

(solve (aoc.string-from "2016/01.inp"))
#+end_src

#+RESULTS:
: 161


* DONE Day 1.2

Then,  you  notice  the  instructions  continue on  the  back  of  the
Recruiting Document. Easter Bunny HQ is actually at the first location
you visit twice.

For  example, if  your  instructions are  R8, R4,  R4,  R8, the  first
location you visit twice is 4 blocks away, due East.

How many blocks away is the first location you visit twice?

#+begin_src fennel :session day01 :exports both
(fn solve2 [input]
  (var dir (/ math.pi 2))
  (var x 0)
  (var y 0)
  (var done false)
  (let [steps (aoc.string-split (. input 1) ", ")
        res [[0 0]]]
    (each [_ step (ipairs steps) &until done]
      (let [D (string.sub step 1 1)
            d (string.sub step 2)]
        (if (= "R" D)
            (set dir (- dir (/ math.pi 2)))
            (set dir (+ dir (/ math.pi 2))))
        (set x (+ x (* d (lume.round (math.cos dir)))))
        (set y (+ y (* d (lume.round (math.sin dir))))))
      (let [[fx fy] (table.remove res)
            [tx ty] [x y]]
        (if (= fx tx)
            (for [i fy ty (if (< ty fy) -1 1) &until done]
              (if (aoc.matrix-contains? res [x i])
                  (do 
                    (set done true)
                    (set y i))
                  (table.insert res [x i])))
            (for [i fx tx (if (< tx fx) -1 1) &until done]
              (if (aoc.matrix-contains? res [i y])
                  (do 
                    (set done true)
                    (set x i))
                  (table.insert res [i y]))))))
    (+ (math.abs x) (math.abs y))))

(fn test2 [expected input]
  (assert (= expected (solve2 [input]))))

(test2 4 "R8, R4, R4, R8")

(solve2 (aoc.string-from "2016/01.inp"))
#+end_src

#+RESULTS:
: 110

* DONE Day 2.1

You   arrive   at   Easter   Bunny   Headquarters   under   cover   of
darkness. However, you left in such a  rush that you forgot to use the
bathroom! Fancy  office buildings  like this  one usually  have keypad
locks on their bathrooms, so you search the front desk for the code.

"In order to improve security,"  the document you find says, "bathroom
codes will  no longer  be written down.  Instead, please  memorize and
follow the procedure below to access the bathrooms."

The document goes on to explain that  each button to be pressed can be
found  by starting  on  the  previous button  and  moving to  adjacent
buttons on the keypad:  U moves up, D moves down, L  moves left, and R
moves  right. Each  line of  instructions corresponds  to one  button,
starting  at the  previous button  (or, for  the first  line, the  "5"
button); press whatever button you're on at the end of each line. If a
move doesn't lead to a button, ignore it.

You can't hold it much longer, so you decide to figure out the code as
you walk to the bathroom. You picture a keypad like this:

#+begin_example
1 2 3
4 5 6
7 8 9
#+end_example

Suppose your instructions are:

#+begin_example
ULL
RRDDD
LURDL
UUUUD
#+end_example

- You start at "5" and move up (to "2"), left (to "1"), and left (you
  can't, and stay on "1"), so the first button is 1.
- Starting from the previous button ("1"), you move right twice (to
  "3") and then down three times (stopping at "9" after two moves and
  ignoring the third), ending up with 9.
- Continuing from "9", you move left, up, right, down, and left, ending with 8.
- Finally, you move up four times (stopping at "2"), then down once,
  ending with 5.

So, in this example, the bathroom code is 1985.

Your puzzle input  is the instructions from the document  you found at
the front desk. What is the bathroom code?

#+begin_src fennel :session day02 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))

(local test-input
       ["ULL"
        "RRDDD"
        "LURDL"
        "UUUUD"])

(fn solve [input]
  (let [pos {:x 2 :y 2}
        xs (lume.map input #(aoc.string-toarray $))
        keypad [[1 2 3]
               [4 5 6]
               [7 8 9]]
        res []]
    (each [_ ys (ipairs xs)]
      (each [_ x (ipairs ys)]
        (case x
          "U" (tset pos :y (math.max 1 (- (. pos :y) 1)))
          "D" (tset pos :y (math.min 3 (+ 1 (. pos :y))))
          "R" (tset pos :x (math.min 3 (+ 1 (. pos :x))))
          "L" (tset pos :x (math.max 1 (- (. pos :x) 1)))))
      (table.insert res (. (. keypad (. pos :y)) (. pos :x))))
    (table.concat res "")))

(fn test [expected input]
  (assert (= expected (solve input))))

(test "1985" test-input)

(solve (aoc.string-from "2016/02.inp"))
#+end_src

#+RESULTS:
: 35749


* DONE Day 2.2

You finally  arrive at the bathroom  (it's a several minute  walk from
the lobby so  visitors can behold the many fancy  conference rooms and
water coolers on this floor) and go to punch in the code. Much to your
bladder's  dismay,  the  keypad  is  not  at  all  like  you  imagined
it.  Instead,  you are  confronted  with  the  result of  hundreds  of
man-hours of bathroom-keypad-design meetings:

#+begin_example
    1
  2 3 4
5 6 7 8 9
  A B C
    D
#+end_example

You still start at "5" and stop  when you're at an edge, but given the
same instructions as above, the outcome is very different:
- You start at "5" and don't move at all (up and left are both edges),
  ending at 5.
- Continuing  from "5",  you move  right  twice and  down three  times
  (through "6", "7", "B", "D", "D"), ending at D.
- Then, from  "D", you move  five more  times (through "D",  "B", "C",
  "C", "B"), ending at B.
- Finally, after five more moves, you end at 3.

So, given the actual keypad layout,  the code would be =5DB3=. Using the
same instructions in  your puzzle input, what is  the correct bathroom
code?

#+begin_src fennel :session day02 :exports both
(fn solve2 [input]
  (let [pos {:x 1 :y 3}
        xs (lume.map input #(aoc.string-toarray $))
        keypad [["0" "0" "1" "0" "0"]
                ["0" "2" "3" "4" "0"]
                ["5" "6" "7" "8" "9"]
                ["0" "A" "B" "C" "0"]
                ["0" "0" "D" "0" "0"]]
        res []]
    (each [_ ys (ipairs xs)]
      (each [_ x (ipairs ys)]
        (case x
          "U" (let [newy (math.max 1 (- (. pos :y) 1))]
                (when (not= 0 (tonumber (. (. keypad newy) (. pos :x))))
                    (tset pos :y newy)))
          "D" (let [newy (math.min 5 (+ 1 (. pos :y)))]
                (when (not= 0 (tonumber (. (. keypad newy) (. pos :x))))
                  (tset pos :y newy)))
          "R" (let [newx (math.min 5 (+ 1 (. pos :x)))]
                (when (not= 0 (tonumber (. (. keypad (. pos :y)) newx)))
                  (tset pos :x newx)))
          "L" (let [newx (math.max 1 (- (. pos :x) 1))]
                (when (not= 0 (tonumber (. (. keypad (. pos :y)) newx)))
                  (tset pos :x newx)))))
      (table.insert res (. (. keypad (. pos :y)) (. pos :x))))
    (table.concat res "")))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 "5DB3" test-input)

(solve2 (aoc.string-from "2016/02.inp"))
#+end_src

#+RESULTS:
: 9365C

* DONE Day 3.1

Now that you can think clearly,  you move deeper into the labyrinth of
hallways and office furniture that makes  up this part of Easter Bunny
HQ. This must be a graphic design department; the walls are covered in
specifications for triangles.

Or are they?

The  design  document gives  the  side  lengths  of each  triangle  it
describes, but... 5  10 25? Some of these aren't  triangles. You can't
help but mark the impossible ones.

In a valid triangle, the sum of  any two sides must be larger than the
remaining side. For example, the "triangle" given above is impossible,
because 5 + 10 is not larger than 25.

In your puzzle input, how many of the listed triangles are possible?

#+begin_src fennel :session day03 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input ["  5  10  25"])

(fn triangle? [a b c]
  (and
   (< a (+ b c))
   (< b (+ a c))
   (< c (+ a b))))

(fn count-triangles [xs]
  (var res 0)
  (each [_ [a b c] (ipairs xs)]
    (when (triangle? a b c)
      (set res (+ 1 res))))
  res)

(fn solve [input]
  (-> input
      (lume.map #(aoc.string-tonumarray $))
      (count-triangles)))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 0 test-input)

(solve (aoc.string-from "2016/03.inp"))
#+end_src

#+RESULTS:
: 1050

* DONE Day 3.2

Now that you've helpfully marked  up their design documents, it occurs
to   you   that  triangles   are   specified   in  groups   of   three
vertically.  Each  set  of  three  numbers in  a  column  specifies  a
triangle. Rows are unrelated.

For example, given the following  specification, numbers with the same
hundreds digit would be part of the same triangle:

#+begin_example
101 301 501
102 302 502
103 303 503
201 401 601
202 402 602
203 403 603
#+end_example

In your puzzle input, and instead  reading by columns, how many of the
listed triangles are possible?

#+begin_src fennel :session day03 :exports both
(fn solve2 [input]
  (-> input
      (lume.map #(aoc.string-tonumarray $))
      (aoc.table-transpose)
      (lume.map #(aoc.partition3 $))
      (aoc.table-flatten)
      (count-triangles)))

(solve2 (aoc.string-from "2016/03.inp"))
#+end_src

#+RESULTS:
: 1921

* DONE Day 4.1

Finally, you come across an information kiosk with a list of rooms. Of
course,  the  list is  encrypted  and  full  of  decoy data,  but  the
instructions  to decode  the  list are  barely  hidden nearby.  Better
remove the decoy data first.

Each room consists  of an encrypted name  (lowercase letters separated
by dashes) followed by  a dash, a sector ID, and  a checksum in square
brackets.

A room is real  (not a decoy) if the checksum is  the five most common
letters  in  the  encrypted  name,  in  order,  with  ties  broken  by
alphabetization. For example:
- aaaaa-bbb-z-y-x-123[abxyz] is a real room because the most common
  letters are a (5), b (3), and then a tie between x, y, and z, which
  are listed alphabetically.
- a-b-c-d-e-f-g-h-987[abcde] is a real room because although the
  letters are all tied (1 of each), the first five are listed
  alphabetically.
- not-a-real-room-404[oarel] is a real room.
- totally-real-room-200[decoy] is not.

Of the  real rooms from  the list above, the  sum of their  sector IDs
is 1514.

What is the sum of the sector IDs of the real rooms?

#+begin_src fennel :session day04 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input
       ["aaaaa-bbb-z-y-x-123[abxyz]"
        "a-b-c-d-e-f-g-h-987[abcde]"
        "not-a-real-room-404[oarel]"
        "totally-real-room-200[decoy]"])

(fn parse-rooms [s]
  (let [len (string.len s)]
    [(string.sub s 1 (- len 11))
     (tonumber (string.sub s (- len 9) (- len 7)))
     (string.sub s (- len 5) (- len 1))]))

(fn checksum [room]
  (-> room
      (string.gsub "%-" "")
      (aoc.string-toarray)
      (aoc.table-sort)
      (aoc.partition-by #(= $1 $2))
      (aoc.table-sort (fn [x y] (if (= (# x) (# y))
                                    (< (. x 1) (. y 1))
                                    (>= (# x) (# y)))))
      (lume.map #(. $ 1))
      (table.concat "")
      (string.sub 1 5)))

(fn solve [input]
  (-> input
      (lume.map #(parse-rooms $))
      (lume.filter #(= (checksum (. $ 1)) (. $ 3)))
      (lume.map #(. $ 2))
      (lume.reduce #(+ $1 $2))))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 1514 test-input)

(solve (aoc.string-from "2016/04.inp"))
#+end_src

#+RESULTS:
: 361724


* DONE Day 4.2

With all the decoy data out of the way, it's time to decrypt this list
and get moving.

The room names are encrypted by a state-of-the-art shift cipher, which
is  nearly  unbreakable  without  the  right  software.  However,  the
information kiosk designers  at Easter Bunny HQ were  not expecting to
deal with a master cryptographer like yourself.

To  decrypt  a room  name,  rotate  each  letter forward  through  the
alphabet a number of times equal to the room's sector ID. A becomes B,
B becomes C, Z becomes A, and so on. Dashes become spaces.

For  example,  the  real  name for  =qzmt-zixmtkozy-ivhz-343=  is  =very
encrypted name=.

What is the sector ID of the room where North Pole objects are stored?

#+begin_src fennel :session day04 :exports both
(local test2-input
       ["qzmt-zixmtkozy-ivhz-343[zimth]"])

(fn ceasar-decrypt [[room id sum]]
  (let [xs (aoc.string-split room "-")]
    (lume.map xs #(aoc.string-shift $ id))))

(fn solve2 [input target]
  (. 
   (-> input
       (lume.map #(parse-rooms $))
       (lume.filter #(= (checksum (. $ 1)) (. $ 3)))
       (lume.map (fn [e] [(table.concat (ceasar-decrypt e) " ")
                          (. e 2)]))
       (lume.filter (fn [e] (= target (. e 1))))
       (aoc.first)) 2))

(fn test2 [expected input target]
  (assert (= expected (solve2 input target))))

(test2 343 test2-input "very encrypted name")

(solve2 (aoc.string-from "2016/04.inp") "northpole object storage")
#+end_src

#+RESULTS:
: 482

* DONE Day 5.1

You are faced with a security  door designed by Easter Bunny engineers
that  seem  to have  acquired  most  of  their security  knowledge  by
watching hacking movies.

The eight-character password  for the door is  generated one character
at a time by finding the MD5  hash of some Door ID (your puzzle input)
and an increasing integer index (starting with 0).

A hash indicates the next character in the password if its hexadecimal
representation  starts  with  five  zeroes.  If  it  does,  the  sixth
character in the hash is the next character of the password.

For example, if the Door ID is abc:
- The first index which produces a hash that starts with five zeroes
  is 3231929, which we find by hashing abc3231929; the sixth character
  of the hash, and thus the first character of the password, is 1.
- 5017308 produces the next interesting hash, which starts with
  000008f82..., so the second character of the password is 8.
- The third time a hash starts with five zeroes is for abc5278568,
  discovering the character f.
  
In this example, after continuing this  search a total of eight times,
the password is 18f47a30.

Given the actual Door ID, what is the password?

#+begin_src fennel :session day05 :exports both
(local md5 (require :lib.md5))

(fn solve [seed]
  (var salt 0)
  (let [res []]
    (while (< (# res) 8)
      (let [hash (md5.sumhexa (.. seed salt))
            prefix (string.sub hash 1 5)]
        (when (= "00000" prefix)
          (table.insert res (string.sub hash 6 6)))
        (set salt (+ 1 salt))))
    (table.concat res "")))

(fn test [expected input] 
  (assert (= expected (solve input))))

(test "18f47a30" "abc")

(solve "reyedfim")
#+end_src

#+RESULTS:
: f97c354d

* TODO Day 5.2

As the  door slides open,  you are presented  with a second  door that
uses a slightly more  inspired security mechanism. Clearly unimpressed
by  the last  version  (in what  movie is  the  password decrypted  in
order?!),  the  Easter  Bunny  engineers  have  worked  out  a  [[https://www.youtube.com/watch?v=NHWjlCaIrQo&t=25][better
solution]].

Instead of simply filling in the password from left to right, the hash
now also indicates the position within the password to fill. You still
look for hashes  that begin with five zeroes; however,  now, the sixth
character represents the position (0-7),  and the seventh character is
the character to put in that position.

A hash result of  000001f means that f is the  second character in the
password.  Use only  the first  result for  each position,  and ignore
invalid positions.

For example, if the Door ID is =abc=:
- The first interesting hash is from abc3231929, which produces
  0000015...; so, 5 goes in position 1: _5______.
- In the previous method, 5017308 produced an interesting hash;
  however, it is ignored, because it specifies an invalid position
  (8).
- The second interesting hash is at index 5357525, which produces
  000004e...; so, e goes in position 4: _5__e___.

You almost  choke on your  popcorn as  the final character  falls into
place, producing the password 05ace8e3.

Given the actual Door ID and this new method, what is the password? Be
extra  proud of  your solution  if  it uses  a cinematic  "decrypting"
animation.
