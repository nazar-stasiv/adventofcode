#+TITLE: 2017 challenge
#+AUTHOR: Advent of code
#+EMAIL: nazar@autistici.org
#+LANGUAGE: en
#+OPTIONS: toc:nil

* DONE Day 1.1

The  night before  Christmas,  one of  Santa's Elves  calls  you in  a
panic.  "The printer's  broken! We  can't  print the  Naughty or  Nice
List!" By the  time you make it  to sub-basement 17, there  are only a
few minutes until midnight. "We have  a big problem," she says; "there
must be almost  fifty bugs in this system, but  nothing else can print
The List. Stand in this square,  quick! There's no time to explain; if
you can convince  them to pay you  in stars, you'll be  able to--" She
pulls a lever and the world goes blurry.

When your eyes can focus again,  everything seems a lot more pixelated
than before. She must have sent you inside the computer! You check the
system clock: 25 milliseconds until midnight. With that much time, you
should be able to collect all fifty stars by December 25th.

Collect stars by  solving puzzles. Two puzzles will  be made available
on each day  millisecond in the Advent calendar; the  second puzzle is
unlocked  when  you  complete  the   first.  Each  puzzle  grants  one
star. Good luck!

You're standing  in a room  with "digitization quarantine"  written in
LEDs along one wall. The only door  is locked, but it includes a small
interface. "Restricted Area - Strictly No Digitized Users Allowed."

It goes on to explain that you  may only leave by solving a captcha to
prove you're not a human. Apparently,  you only get one millisecond to
solve the  captcha: too  fast for  a normal human,  but it  feels like
hours to you.

The captcha requires  you to review a sequence of  digits (your puzzle
input) and find the sum of all digits that match the next digit in the
list. The list is  circular, so the digit after the  last digit is the
first digit in the list.

For example:
- 1122 produces a sum of 3 (1 + 2) because the first digit (1) matches
  the second digit and the third digit (2) matches the fourth digit.
- 1111 produces 4 because each digit (all 1) matches the next.
- 1234 produces 0 because no digit matches the next.
- 91212129 produces 9 because the only digit that matches the next one
  is the last digit, 9.
  
What is the solution to your captcha?

#+begin_src fennel :session day01 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(fn solve [input]
  (-> (. input 1)
      (.. (string.sub (. input 1) 1 1))
      (aoc.string-toarray)
      (lume.map (fn [e] (tonumber e)))
      (aoc.partition1)
      (lume.map (fn [[e1 e2]] (if (= e1 e2) e1 0)))
      (aoc.table-sum)))

(fn test [expected input]
  (let [res (solve input)]
    (assert (= expected res) res)))

(test 3 ["1122"])
(test 4 ["1111"])
(test 0 ["1234"])
(test 9 ["91212129"])
(solve (aoc.string-from "2017/01.inp"))
#+end_src

#+RESULTS:
: 995

* DONE Day 1.2

You notice  a progress bar  that jumps to 50%  completion. Apparently,
the  door   isn't  yet  satisfied,   but  it   did  emit  a   star  as
encouragement. The instructions change:

Now, instead of  considering the next digit, it wants  you to consider
the digit  halfway around  the circular  list. That  is, if  your list
contains 10 items, only include a digit  in your sum if the digit 10/2
=  5 steps  forward matches  it. Fortunately,  your list  has an  even
number of elements.

For example:
- 1212 produces  6: the  list contains  4 items,  and all  four digits
  match the digit 2 items ahead.
- 1221 produces 0, because every comparison is between a 1 and a 2.
- 123425 produces  4, because both 2s  match each other, but  no other
  digit has a match.
- 123123 produces 12.
- 12131415 produces 4.

What is the solution to your new captcha?

#+begin_src fennel :session day01 :exports both
(fn solve2 [input]
  (let [xs (lume.map (aoc.string-toarray (. input 1)) #(tonumber $))]
    (aoc.table-sum
     (icollect [i v (ipairs xs)]
        (if (= v (. xs (aoc.modulo+ i (/ (# xs) 2) (# xs)))) v 0)))))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 6 ["1212"])
(test2 0 ["1221"])
(test2 4 ["123425"])
(test2 12 ["123123"])
(test2 4 ["12131415"])
(solve2 (aoc.string-from "2017/01.inp"))
#+end_src

#+RESULTS:
: 1130


* DONE Day 2.1

As you walk  through the door, a glowing humanoid  shape yells in your
direction. "You  there! Your state  appears to  be idle. Come  help us
repair  the  corruption in  this  spreadsheet  -  if we  take  another
millisecond, we'll have to display an hourglass cursor!"

The spreadsheet consists of rows of apparently-random numbers. To make
sure the  recovery process  is on  the right track,  they need  you to
calculate  the spreadsheet's  checksum.  For each  row, determine  the
difference  between the  largest  value and  the  smallest value;  the
checksum is the sum of all of these differences.

For example, given the following spreadsheet:
#+begin_example
5 1 9 5
7 5 3
2 4 6 8
#+end_example

- The first row's largest and smallest values are 9 and 1, and their
  difference is 8.
- The second row's largest and smallest values are 7 and 3, and their
  difference is 4.
- The third row's difference is 6.

In this example, the spreadsheet's checksum would be 8 + 4 + 6 = 18.

What is the checksum for the spreadsheet in your puzzle input?


#+begin_src fennel :session day02 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input
       ["5\t1\t9\t5"
        "7\t5\t3"
        "2\t4\t6\t8"])

(fn solve [input]
  (let [xs (lume.map input #(aoc.string-tonumarray $))
        ys (icollect [k v (ipairs xs)]
             (- (aoc.max v) (aoc.min v)))]
    (accumulate [sum 0 k v (ipairs ys)]
      (+ sum v))))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 18 test-input)

(solve (aoc.string-from "2017/02.inp"))
#+end_src

#+RESULTS:
: 42299

* DONE Day 2.2

"Great work; looks  like we're on the right track  after all. Here's a
star  for   your  effort."  However,   the  program  seems   a  little
worried. Can programs be worried?


"Based on what we're seeing, it looks like all the User wanted is some
information    about   the    =evenly   divisible    values=   in    the
spreadsheet. Unfortunately, none  of us are equipped for  that kind of
calculation - most of us specialize in bitwise operations."

It sounds like  the goal is to  find the only two numbers  in each row
where one evenly divides the other -  that is, where the result of the
division operation  is a  whole number.  They would  like you  to find
those  numbers on  each  line, divide  them, and  add  up each  line's
result.

For example, given the following spreadsheet:

#+begin_example
5 9 2 8
9 4 7 3
3 8 6 5
#+end_example

- In the first row, the only two numbers that evenly divide are 8 and
  2; the result of this division is 4.
- In the second row, the two numbers are 9 and 3; the result is 3.
- In the third row, the result is 2.

In this example, the sum of the results would be =4 + 3 + 2 = 9=.

What is the sum of each row's result in your puzzle input?

#+begin_src fennel :session day02 :exports both
(local test2-input
       ["5\t9\t2\t8"
        "9\t4\t7\t3"
        "3\t8\t6\t5"])

(fn even-division [xs]
  (let [res []]
    (for [i 1 (- (# xs) 1)]
      (for [j (+ i 1) (# xs)]
        (table.insert res 
                      (if (= 0 (% (. xs i) (. xs j)))
                          (/ (. xs i) (. xs j))
                          (= 0 (% (. xs j) (. xs i)))
                          (/ (. xs j) (. xs i))
                          0))))
    res))

(fn solve2 [input]
  (-> input
      (lume.map #(aoc.string-tonumarray $))
      (lume.map #(even-division $))
      (aoc.table-sum)))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 9 test2-input)

(solve2 (aoc.string-from "2017/02.inp"))
#+end_src

#+RESULTS:
: 277


* DONE Day 4.1

A new system  policy has been put in place  that requires all accounts
to  use  a passphrase  instead  of  simply  a password.  A  passphrase
consists of a series of words (lowercase letters) separated by spaces.

To ensure security, a valid passphrase must contain no duplicate words.

For example:
- aa bb cc dd ee is valid.
- aa bb cc dd aa is not valid - the word aa appears more than once.
- aa bb cc dd aaa is valid - aa and aaa count as different words.

The  system's  full  passphrase  list  is  available  as  your  puzzle
input. How many passphrases are valid?

#+begin_src fennel :session day04 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input
       ["aa bb cc dd ee"
        "aa bb cc dd aa"
        "aa bb cc dd aaa"])

(fn solve [input]
  (var res 0)
  (let [lines (lume.map input #(aoc.string-split $ " "))]
    (each [_ line (ipairs lines)]
      (when (aoc.table-no-dups? line)
        (set res (+ 1 res)))))
  res)

(fn test [expected input]
  (assert (= expected (solve input))))

(test 2 test-input)

(solve (aoc.string-from "2017/04.inp"))
#+end_src

#+RESULTS:
: 455


* DONE Day 4.2

For  added  security,  yet  another  system policy  has  been  put  in
place. Now,  a valid  passphrase must  contain no  two words  that are
anagrams  of each  other -  that is,  a passphrase  is invalid  if any
word's  letters can  be  rearranged  to form  any  other  word in  the
passphrase.

For example:
- abcde fghij is a valid passphrase.
- abcde xyz ecdab is  not valid - the letters from  the third word can
  be rearranged to form the first word.
- a ab abc abd abf abj is a valid passphrase, because all letters need
  to be used when forming another word.
- iiii oiii ooii oooi oooo is valid.
- oiii  ioii iioi  iiio is  not  valid -  any  of these  words can  be
  rearranged to form any other word.
  
Under this new system policy, how many passphrases are valid?

#+begin_src fennel :session day04 :exports both
(local test2-input
       ["abcde fghij"
        "abcde xyz ecdab"
        "a ab abc abd abf abj"
        "iiii oiii ooii oooi oooo"
        "oiii ioii iioi iiio"])

(fn solve2 [input]
  (var res 0)
  (let [lines (lume.map input (fn [line] (aoc.string-split line " ")))
        lines2 (lume.map lines
                         (fn [line] (lume.map line
                                              (fn [word]
                                                (let [t (aoc.string-toarray word)]
                                                  (table.sort t)
                                                  (table.concat t ""))))))]
    (each [_ line (ipairs lines2)]
      (when (aoc.table-no-dups? line)
        (set res (+ 1 res)))))
  res)

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 3 test2-input)

(solve2 (aoc.string-from "2017/04.inp"))
#+end_src

#+RESULTS:
: 186


* DONE Day 5.1

An urgent  interrupt arrives from the  CPU: it's trapped in  a maze of
jump instructions, and it would like assistance from any programs with
spare cycles to help find the exit.

The message  includes a list of  the offsets for each  jump. Jumps are
relative: -1 moves  to the previous instruction, and 2  skips the next
one. Start at the first instruction in the list. The goal is to follow
the jumps until one leads outside the list.

In addition, these instructions are a little strange; after each jump,
the offset of that instruction increases  by 1. So, if you come across
an offset of 3, you would  move three instructions forward, but change
it to a 4 for the next time it is encountered.

For example, consider the following list of jump offsets:

#+begin_example
0
3
0
1
-3
#+end_example

Positive  jumps   ("forward")  move  downward;  negative   jumps  move
upward. For  legibility in this  example, these offset values  will be
written  all on  one  line,  with the  current  instruction marked  in
parentheses.  The  following steps  would be taken  before an  exit is
found:
- (0) 3 0 1 -3 - before we have taken any steps.
- (1)  3  0 1  -3  -  jump  with offset  0  (that  is, don't  jump  at
  all). Fortunately, the instruction is then incremented to 1.
- 2 (3)  0 1  -3 -  step forward  because of  the instruction  we just
  modified. The first instruction is incremented again, now to 2.
- 2 4 0 1 (-3) - jump all the way to the end; leave a 4 behind.
- 2 (4) 0 1 -2 - go back to where we just were; increment -3 to -2.
- 2 5 0 1 -2 - jump 4 steps forward, escaping the maze.

In this example, the  exit is reached in 5 steps.  How many steps does
it take to reach the exit?

#+begin_src fennel :session day05 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input
       ["0"
        "3"
        "0"
        "1"
        "-3"])

(fn table-inc [t p]
  (let [old (. t (+ 1 p))]
    (aoc.table-swap t (+ 1 p) (+ 1 old))
    old))

(fn solve [input]
  (let [xs (lume.map input #(tonumber $))
        len (# xs)]
    (var p 0)
    (var c 0)
    (while (<= p (- len 1))
      (set p (+ p (table-inc xs p)))
      (set c (+ 1 c)))
    c))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 5 test-input)

(solve (aoc.string-from "2017/05.inp"))
#+end_src

#+RESULTS:
: 326618


* DONE Day 5.2

Now, the jumps  are even stranger: after each jump,  if the offset was
three or more,  instead decrease it by 1. Otherwise,  increase it by 1
as before.

Using  this rule  with the  above example,  the process  now takes  10
steps, and the offset values after finding  the exit are left as 2 3 2
3 -1. How many steps does it now take to reach the exit?

#+begin_src fennel :session day05 :exports both
(fn table-inc2 [t p]
  (let [old (. t (+ 1 p))]
    (if (<= 3 old)
        (aoc.table-swap t (+ 1 p) (- old 1))
        (aoc.table-swap t (+ 1 p) (+ old 1)))
    old))

(fn solve2 [input]
  (let [xs (lume.map input #(tonumber $))
        len (# xs)]
    (var p 0)
    (var c 0)
    (while (<= p (- len 1))
      (set p (+ p (table-inc2 xs p)))
      (set c (+ 1 c)))
    c))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 10 test-input)

(solve2 (aoc.string-from "2017/05.inp"))
#+end_src

#+RESULTS:
: 21841249

* DONE Day 6.1

A debugger program here  is having an issue: it is  trying to repair a
memory reallocation routine, but it keeps getting stuck in an infinite
loop.

In this  area, there are  sixteen memory  banks; each memory  bank can
hold any number of blocks. The  goal of the reallocation routine is to
balance the blocks between the memory banks.

The reallocation routine  operates in cycles. In each  cycle, it finds
the memory bank with the most  blocks (ties won by the lowest-numbered
memory bank)  and redistributes  those blocks among  the banks.  To do
this, it removes all of the  blocks from the selected bank, then moves
to the next (by  index) memory bank and inserts one  of the blocks. It
continues doing  this until it runs  out of blocks; if  it reaches the
last memory bank, it wraps around to the first one.

The debugger would  like to know how many redistributions  can be done
before a blocks-in-banks configuration is  produced that has been seen
before.

For example, imagine a scenario with only four memory banks:
- The banks start with 0, 2, 7, and 0 blocks. The third bank has the
  most blocks, so it is chosen for redistribution.
- Starting with the next bank (the fourth bank) and then continuing to
  the first bank, the second bank, and so on, the 7 blocks are spread
  out over the memory banks. The fourth, first, and second banks get
  two blocks each, and the third bank gets one back. The final result
  looks like this: 2 4 1 2.
- Next, the second bank is chosen because it contains the most blocks
  (four). Because there are four memory banks, each gets one
  block. The result is: 3 1 2 3.
- Now, there is a tie between the first and fourth memory banks, both
  of which have three blocks. The first bank wins the tie, and its
  three blocks are distributed evenly over the other three banks,
  leaving it with none: 0 2 3 4.
- The fourth bank is chosen, and its four blocks are distributed such
  that each of the four banks receives one: 1 3 4 1.
- The third bank is chosen, and the same thing happens: 2 4 1 2.

At this point,  we've reached a state  we've seen before: 2 4  1 2 was
already  seen. The  infinite loop  is detected  after the  fifth block
redistribution cycle, and so the answer in this example is 5.

Given  the  initial  block  counts  in your  puzzle  input,  how  many
redistribution  cycles must  be  completed before  a configuration  is
produced that has been seen before?

#+begin_src fennel :session day06 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input ["0\t2\t7\t0"])

(fn table-inc [xs i]
  (var v (. xs i))
  (var j (if (< i (# xs)) (+ 1 i) 1))
  (aoc.table-swap xs i 0)
  (while (< 0 v)
    (aoc.table-swap xs j (+ 1 (. xs j)))
    (set v (- v 1))
    (set j (if (< j (# xs)) (+ 1 j) 1)))
  xs)

(fn solve [input]
  (let [xs (aoc.string-tonumarray (. input 1))
        res [(aoc.table-clone xs)]]
    (var cycle 1)
    (table-inc xs (aoc.max-index xs))
    (while (not (aoc.matrix-contains? res xs))
      (table.insert res (aoc.table-clone xs))
      (set cycle (+ 1 cycle))
      (table-inc xs (aoc.max-index xs)))
    cycle))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 5 test-input)

(solve (aoc.string-from "2017/06.inp"))
#+end_src

#+RESULTS:
: 4074

* TODO Day 6.2

Out of curiosity, the debugger would also like to know the size of the
loop: starting from a state that has already been seen, how many block
redistribution cycles must be performed before that same state is seen
again?

In the example above, 2 4 1 2  is seen again after four cycles, and so
the answer in that example would be 4.

How  many  cycles are  in  the  infinite  loop  that arises  from  the
configuration in your puzzle input?

