#+TITLE: 2015 challenge
#+AUTHOR: Advent of code
#+EMAIL: nazar@autistici.org
#+LANGUAGE: en
#+OPTIONS: toc:nil

* DONE Day 1.1

Santa  was hoping  for a  white Christmas,  but his  weather machine's
"snow"  function is  powered by  stars, and  he's fresh  out! To  save
Christmas, he needs you to collect fifty stars by December 25th.

Collect stars by helping Santa solve puzzles. Two puzzles will be made
available on  each day in  the Advent  calendar; the second  puzzle is
unlocked  when  you  complete  the  first.   Each  puzzle  grants  one
star. Good luck!

Here's an easy puzzle to warm you up.

Santa is trying to deliver presents in a large apartment building, but
he can't  find the right  floor - the directions  he got are  a little
confusing. He  starts on the ground  floor (floor 0) and  then follows
the instructions one character at a time.

An opening  parenthesis, (,  means he  should go up  one floor,  and a
closing parenthesis, ), means he should go down one floor.

The apartment building is very tall, and the basement is very deep; he
will never find the top or bottom floors.

For example:
- (()) and ()() both result in floor 0.
- ((( and (()(()( both result in floor 3.
- ))((((( also results in floor 3.
- ()) and ))( both result in floor -1 (the first basement level).
- ))) and )())()) both result in floor -3.

To what floor do the instructions take Santa?

#+begin_src fennel :session day01 :exports both
(local aoc (require :lib.aoc))

(fn solve [input]
  (var res 0)
  (let [xs (aoc.string-toarray (. input 1))]
    (each [_ x (ipairs xs)]
      (if (= ")" x)
          (set res (- res 1))
          (set res (+ 1 res)))))
  res)

(solve (aoc.string-from "2015/01.inp"))
#+end_src

#+RESULTS:
: 74

* DONE Day 1.2

Now,  given the  same instructions,  find  the position  of the  first
character that causes him to enter  the basement (floor -1). The first
character in the instructions has position 1, the second character has
position 2, and so on.

For example:
- ) causes him to enter the basement at character position 1.
- ()()) causes him to enter the basement at character position 5.

What is the position of the character that causes Santa to first enter
the basement?

#+begin_src fennel :session day01 :exports both
(fn solve2 [input]
  (var res 0)
  (var done false)
  (let [xs (aoc.string-toarray (. input 1))]
    (each [i x (ipairs xs) &until done]
      (set res (+ res (if (= ")" x) -1 1)))
      (when (< res 0) (set done i))))
  done)

(solve2 (aoc.string-from "2015/01.inp"))
#+end_src

#+RESULTS:
: 1795

* DONE Day 2.1

The  elves are  running low  on wrapping  paper, and  so they  need to
submit an order  for more. They have a list  of the dimensions (length
l, width  w, and  height h) of  each present, and  only want  to order
exactly as much as they need.

Fortunately,  every present  is  a box  (a  perfect right  rectangular
prism), which makes  calculating the required wrapping  paper for each
gift  a little  easier: find  the surface  area of  the box,  which is
2*l*w + 2*w*h  + 2*h*l. The elves  also need a little  extra paper for
each present: the area of the smallest side.

For example:
- A present with dimensions 2x3x4 requires 2*6 + 2*12 + 2*8 = 52
  square feet of wrapping paper plus 6 square feet of slack, for a
  total of 58 square feet.
- A present with dimensions 1x1x10 requires 2*1 + 2*10 + 2*10 = 42
  square feet of wrapping paper plus 1 square foot of slack, for a
  total of 43 square feet.

All numbers in the elves' list are in feet. How many total square feet
of wrapping paper should they order?

#+begin_src fennel :session day02 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))

(local test-input
       ["2x3x4"
        "1x1x10"])

(fn area [w h l]
  (let [a1 (* l w) a2 (* w h) a3 (* h l)]
    (+ (* 2 a1) (* 2 a2) (* 2 a3) (math.min a1 a2 a3))))

(fn solve [input]
  (var res 0)
  (each [_ dim (ipairs input)]
    (case (aoc.string-split dim "x")
      [x y z] (set res (+ res (area x y z)))
      _ (print (.. "No match found for " dim))))
  res)

(fn test [expected input]
  (assert (= expected (solve input))))

(test 101 test-input)

(solve (aoc.string-from "2015/02.inp"))
#+end_src

#+RESULTS:
: 1588178

* DONE Day 2.2

The  elves are  also running  low on  ribbon. Ribbon  is all  the same
width, so they only have to worry about the length they need to order,
which they would again like to be exact.

The ribbon required to wrap a  present is the shortest distance around
its sides,  or the smallest  perimeter of  any one face.  Each present
also requires  a bow made  out of ribbon as  well; the feet  of ribbon
required for the perfect  bow is equal to the cubic  feet of volume of
the present.  Don't ask how  they tie  the bow, though;  they'll never
tell.

For example:
- A present with dimensions 2x3x4 requires 2+2+3+3 = 10 feet of ribbon
  to wrap the present plus 2*3*4 = 24 feet of ribbon for the bow, for
  a total of 34 feet.
- A present with dimensions 1x1x10 requires 1+1+1+1 = 4 feet of ribbon
  to wrap the present plus 1*1*10 = 10 feet of ribbon for the bow, for
  a total of 14 feet.

How many total feet of ribbon should they order?

#+begin_src fennel :session day02 :exports both
(fn volume [w h l]
  (* w h l))

(fn perimeter [a b]
  (+ (* 2 a) (* 2 b)))

(fn solve2 [input]
  (var res 0)
  (each [_ dim (ipairs input)]
    (case (aoc.string-split dim "x")
      [x y z] (set res (+ res
                          (math.min (perimeter x y)
                                    (perimeter y z)
                                    (perimeter z x))
                          (volume x y z)))
      _ (print (.. "No match found for " dim))))
  res)

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 48 test-input)

(solve2 (aoc.string-from "2015/02.inp"))
#+end_src

#+RESULTS:
: 3783758
