#+TITLE: 2018 challenge
#+AUTHOR: Advent of code
#+EMAIL: nazar@autistici.org
#+LANGUAGE: en
#+OPTIONS: toc:nil

* DONE Day 1.1
"We've detected some temporal anomalies,"  one of Santa's Elves at the
Temporal  Anomaly  Research  and Detection  Instrument  Station  tells
you. She  sounded pretty worried  when she  called you down  here. "At
500-year intervals  into the past,  someone has been  changing Santa's
history!"

"The good news is that the  changes won't propagate to our time stream
for another 25 days, and we have a device" - she attaches something to
your  wrist  -  "that will  let  you  fix  the  changes with  no  such
propagation delay. It's configured to  send you 500 years further into
the past every few  days; that was the best we could  do on such short
notice."

"The  bad  news is  that  we  are  detecting roughly  fifty  anomalies
throughout  time;  the  device  will  indicate  fixed  anomalies  with
stars. The other bad  news is that we only have  one device and you're
the best  person for  the job!  Good lu--"  She taps  a button  on the
device and you  suddenly feel like you're falling.  To save Christmas,
you need to get all fifty stars by December 25th.

Collect stars by  solving puzzles. Two puzzles will  be made available
on each day in the Advent calendar; the second puzzle is unlocked when
you complete the first. Each puzzle grants one star. Good luck!

After feeling like you've been falling  for a few minutes, you look at
the device's  tiny screen.  "Error: Device  must be  calibrated before
first  use.  Frequency  drift detected.  Cannot  maintain  destination
lock." Below  the message, the device  shows a sequence of  changes in
frequency  (your puzzle  input). A  value  like +6  means the  current
frequency increases by 6; a value  like -3 means the current frequency
decreases by 3.

For example, if  the device displays frequency changes of  +1, -2, +3,
+1,  then starting  from a  frequency of  zero, the  following changes
would occur:
- Current frequency  0, change of +1; resulting frequency  1.
- Current frequency  1, change of -2; resulting frequency -1.
- Current frequency -1, change of +3; resulting frequency  2.
- Current frequency  2, change of +1; resulting frequency  3.

In this example, the resulting frequency is 3.

Here are other example situations:
#+begin_example
    +1, +1, +1 results in  3
    +1, +1, -2 results in  0
    -1, -2, -3 results in -6
#+end_example

Starting with  a frequency  of zero, what  is the  resulting frequency
after all of the changes in frequency have been applied?

#+begin_src fennel :session day01 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input ["+1" "-2" "+3" "+1"])

(fn solve [input]
  (let [freq (lume.map input #(tonumber $))]
    (accumulate [sum 0 _ f (ipairs freq)]
      (+ sum f))))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 3 test-input)

(solve (aoc.string-from "2018/01.inp"))
#+end_src

#+RESULTS:
: 574


* DONE Day 1.2

You notice that the device repeats the same frequency change list over
and  over.  To calibrate  the  device,  you  need  to find  the  first
frequency it reaches twice.

For example, using the same list of changes above, the device would
loop as follows:
- Current frequency  0, change of +1; resulting frequency  1.
- Current frequency  1, change of -2; resulting frequency -1.
- Current frequency -1, change of +3; resulting frequency  2.
- Current frequency  2, change of +1; resulting frequency  3.
- (At this point, the device continues from the start of the list.)
- Current frequency  3, change of +1; resulting frequency  4.
- Current frequency  4, change of -2; resulting frequency  2, which
  has already been seen.
  
In this  example, the first  frequency reached  twice is 2.  Note that
your device  might need to repeat  its list of frequency  changes many
times before a duplicate frequency is found, and that duplicates might
be found while in the middle of processing the list.

Here are other examples:
- +1, -1 first reaches 0 twice.
- +3, +3, +4, -2, -4 first reaches 10 twice.
- -6, +3, +8, +5, -6 first reaches 5 twice.
- +7, +7, -2, -7, -4 first reaches 14 twice.

What is the first frequency your device reaches twice?

#+begin_src fennel :session day01 :exports both
(fn solve2 [input]
  (let [xs (lume.map input #(tonumber $))]
    (var pos 2)
    (var res [(. xs 1)])
    (var xi (+ (. xs pos) (. res (length res))))
    (while (= nil (lume.find res xi))
      (table.insert res xi)
      (set pos (aoc.modulo+ 1 pos (length xs)))
      (set xi (+ (. xs pos) (. res (length res)))))
    xi))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 2 test-input)

(local test2-input ["+3" "+3" "+4" "-2" "-4"])
(test2 10 test2-input)

(local test3-input ["-6" "+3" "+8" "+5" "-6"])
(test2 5 test3-input)

(local test4-input ["+7" "+7" "-2" "-7" "-4"])
(test2 14 test4-input)

(solve2 (aoc.string-from "2018/01.inp"))
#+end_src

#+RESULTS:
: 452


* DONE Day 2.1

You stop falling through time, catch your breath, and check the screen
on  the  device. "Destination  reached.  Current  Year: 1518.  Current
Location: North Pole Utility Closet 83N10."  You made it! Now, to find
those anomalies.

Outside the  utility closet, you  hear footsteps and a  voice. "...I'm
not sure either.  But now that so many people  have chimneys, maybe he
could sneak  in that  way?" Another  voice responds,  "Actually, we've
been working  on a  new kind of  suit that would  let him  fit through
tight spaces like  that. But, I heard  that a few days  ago, they lost
the prototype fabric, the design plans, everything! Nobody on the team
can even seem to remember important details of the project!"

"Wouldn't they  have had enough  fabric to  fill several boxes  in the
warehouse?  They'd  be stored  together,  so  the  box IDs  should  be
similar. Too bad it would take forever to search the warehouse for two
similar box IDs..." They walk too far away to hear any more.

Late at night,  you sneak to the  warehouse - who knows  what kinds of
paradoxes you could cause if you  were discovered - and use your fancy
wrist  device to  quickly scan  every box  and produce  a list  of the
likely candidates (your puzzle input).

To make sure you didn't miss  any, you scan the likely candidate boxes
again, counting the  number that have an ID containing  exactly two of
any letter  and then separately  counting those with exactly  three of
any  letter. You  can  multiply those  two counts  together  to get  a
rudimentary checksum and compare it to what your device predicts.

For example, if you see the following box IDs:
- abcdef contains no letters that appear exactly two or three times.
- bababc contains two a and three b, so it counts for both.
- abbcde contains two b, but no letter appears exactly three times.
- abcccd contains three c, but no letter appears exactly two times.
- aabcdd contains two a and two d, but it only counts once.
- abcdee contains two e.
- ababab contains three a and three b, but it only counts once.

Of these box IDs, four of  them contain a letter which appears exactly
twice, and three of them contain  a letter which appears exactly three
times. Multiplying these together produces a checksum of 4 * 3 = 12.

What is the checksum for your list of box IDs?

#+begin_src fennel :session day02 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input
       ["abcdef"
        "bababc"
        "abbcde"
        "abcccd"
        "aabcdd"
        "abcdee"
        "ababab"])

(fn solve [input]
  (var doubles 0)
  (var triples 0)
  (each [_ line (ipairs input)]
    (let [xs (aoc.table-sort (aoc.string-toarray line))
          bins (aoc.partition-by xs #(= $1 $2))]
      (when (< 0 (length (lume.filter bins #(= 2 (length $)))))
        (set doubles (+ 1 doubles)))
      (when (< 0 (length (lume.filter bins #(= 3 (length $)))))
        (set triples (+ 1 triples)))))
  (* doubles triples))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 12 test-input)

(solve (aoc.string-from "2018/02.inp"))
#+end_src

#+RESULTS:
: 3952

* DONE Day 2.2

Confident that your list of box  IDs is complete, you're ready to find
the boxes full of prototype fabric.

The boxes will  have IDs which differ by exactly  one character at the
same position  in both strings.  For example, given the  following box
IDs:

#+begin_example
abcde
fghij
klmno
pqrst
fguij
axcye
wvxyz
#+end_example

The IDs abcde  and axcye are close, but they  differ by two characters
(the second  and fourth). However, the  IDs fghij and fguij  differ by
exactly one character, the third (h  and u). Those must be the correct
boxes.

What  letters are  common between  the two  correct box  IDs? (In  the
example above, this is found  by removing the differing character from
either ID, producing fgij.)

#+begin_src fennel :session day02 :exports both
(local test2-input
       ["abcde"
        "fghij"
        "klmno"
        "pqrst"
        "fguij"
        "axcye"
        "wvxyz"])

(fn solve2 [input]
  (var done false)
  (for [i 1 (length input) &until done]
    (for [j i (length input) &until done]
      (when (= 1 (aoc.hamming-dist (. input i) (. input j)))
        (set done [(. input i) (. input j)]))))
  (aoc.table-tostring
   (lume.filter
    (aoc.string-toarray (. done 1))
    #(lume.find (aoc.string-toarray (. done 2)) $))))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 "fgij" test2-input)

(solve2 (aoc.string-from "2018/02.inp"))
#+end_src

#+RESULTS:
: vtnikorkulbfejvyznqgdxpaw

* DONE Day 3.1

The Elves managed  to locate the chimney-squeeze  prototype fabric for
Santa's suit (thanks to someone who helpfully wrote its box IDs on the
wall  of the  warehouse in  the middle  of the  night). Unfortunately,
anomalies are still  affecting them - nobody can even  agree on how to
cut the fabric.

The whole piece of fabric they're working  on is a very large square -
at least 1000 inches on each side.

Each Elf has  made a claim about  which area of fabric  would be ideal
for  Santa's suit.  All claims  have  an ID  and consist  of a  single
rectangle with edges parallel to the edges of the fabric. Each claim's
rectangle is defined as follows:
- The number of inches between the left edge of the fabric and the
  left edge of the rectangle.
- The number of inches between the top edge of the fabric and the top
  edge of the rectangle.
- The width of the rectangle in inches.
- The height of the rectangle in inches.

A claim  like #123  @ 3,2:  5x4 means  that claim  ID 123  specifies a
rectangle 3 inches from  the left edge, 2 inches from  the top edge, 5
inches wide, and 4 inches tall.  Visually, it claims the square inches
of fabric  represented by # (and  ignores the square inches  of fabric
represented by .) in the diagram below:
#+begin_example
...........
...........
...#####...
...#####...
...#####...
...#####...
...........
...........
...........
#+end_example

The problem  is that many of  the claims overlap, causing  two or more
claims to  cover part  of the  same areas.  For example,  consider the
following claims:
#+begin_example
#1 @ 1,3: 4x4
#2 @ 3,1: 4x4
#3 @ 5,5: 2x2
#+end_example

Visually, these claim the following areas:
#+begin_example
........
...2222.
...2222.
.11XX22.
.11XX22.
.111133.
.111133.
........
#+end_example

The  four  square  inches  marked  with   X  are  claimed  by  both  1
and 2. (Claim 3, while adjacent to the others, does not overlap either
of them.)

If the Elves all proceed with their  own plans, none of them will have
enough fabric. How many square inches of fabric are within two or more
claims?

#+begin_src fennel :session day03 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input
       ["#1 @ 1,3: 4x4"
        "#2 @ 3,1: 4x4"
        "#3 @ 5,5: 2x2"])

(fn read-lines [lines]
  (let [res []]
    (each [_ line (ipairs lines)]
      (let [[_ _ xy wh] (aoc.string-split line " ")
            [x y] (aoc.string-split (string.sub xy 1 (- (string.len xy) 1)) ",")
            [w h] (aoc.string-split wh "x")]
        (table.insert res [(tonumber x) (tonumber y) (+ w x -1) (+ h y -1)])))
    res))

(fn make-fabric [n]
  (let [rows []]
    (for [i 1 n]
      (let [cols []]
        (for [j 1 n]
          (table.insert cols 0))
        (table.insert rows cols)))
    rows))

(fn mark [fabric claim]
  (for [y (. claim 2) (. claim 4)]
    (for [x (. claim 1) (. claim 3)]
      (let [z (. (. fabric (+ 1 y)) (+ 1 x))]
        (aoc.table-replace fabric (+ 1 y) (+ 1 x) (+ 1 z))))))

(fn mark-fabric [claims]
  (let [fabric (make-fabric 1000)]
    (each [_ claim (ipairs claims)]
      (mark fabric claim))
    fabric))

(fn solve [input]
  (let [claims (read-lines input)
        fabric (mark-fabric claims)]
    (length (lume.filter (aoc.table-flatten fabric) #(< 1 $)))))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 4 test-input)

(solve (aoc.string-from "2018/03.inp"))
#+end_src

#+RESULTS:
: 104241

* DONE Day 3.2

Amidst the chaos, you notice that exactly one claim doesn't overlap by
even a single square  inch of fabric with any other  claim. If you can
somehow draw  attention to it,  maybe the Elves  will be able  to make
Santa's suit after all!

For example,  in the claims  above, only claim  3 is intact  after all
claims are made.

What is the ID of the only claim that doesn't overlap?

#+begin_src fennel :session day03 :exports both
(fn solve2 [input]
  (var done false)
  (let [claims (read-lines input)
        fabric (mark-fabric claims)]
    (each [i c (ipairs claims) &until done]
      (set done i)
      (for [y (. c 2) (. c 4)]
        (for [x (. c 1) (. c 3)]
          (when (not= 1 (. (. fabric (+ y 1)) (+ 1 x)))
            (set done false))))))
  done)

(solve2 (aoc.string-from "2018/03.inp"))
#+end_src

#+RESULTS:
: 806

* DONE Day 4.1

You've sneaked  into another  supply closet -  this time,  it's across
from the  prototype suit manufacturing  lab. You need to  sneak inside
and  fix the  issues  with the  suit, but  there's  a guard  stationed
outside the lab, so this is as close as you can safely get.

As you  search the closet for  anything that might help,  you discover
that you're  not the first  person to want  to sneak in.  Covering the
walls, someone has spent an hour  starting every midnight for the past
few months  secretly observing this  guard post! They've  been writing
down the ID  of the one guard on  duty that night - the  Elves seem to
have decided  that one guard was  enough for the overnight  shift - as
well as  when they fall  asleep or wake up  while at their  post (your
puzzle input).

For example, consider  the following records, which  have already been
organized into chronological order:

#+begin_example
[1518-11-01 00:00] Guard #10 begins shift
[1518-11-01 00:05] falls asleep
[1518-11-01 00:25] wakes up
[1518-11-01 00:30] falls asleep
[1518-11-01 00:55] wakes up
[1518-11-01 23:58] Guard #99 begins shift
[1518-11-02 00:40] falls asleep
[1518-11-02 00:50] wakes up
[1518-11-03 00:05] Guard #10 begins shift
[1518-11-03 00:24] falls asleep
[1518-11-03 00:29] wakes up
[1518-11-04 00:02] Guard #99 begins shift
[1518-11-04 00:36] falls asleep
[1518-11-04 00:46] wakes up
[1518-11-05 00:03] Guard #99 begins shift
[1518-11-05 00:45] falls asleep
[1518-11-05 00:55] wakes up
#+end_example

Timestamps are  written using  year-month-day hour:minute  format. The
guard falling asleep  or waking up is always the  one whose shift most
recently  started.  Because  all  asleep/awake times  are  during  the
midnight hour  (00:00 - 00:59), only  the minute portion (00  - 59) is
relevant for those events.

Visually, these records show that the guards are asleep at these times:
#+begin_example
Date   ID   Minute
            000000000011111111112222222222333333333344444444445555555555
            012345678901234567890123456789012345678901234567890123456789
11-01  #10  .....####################.....#########################.....
11-02  #99  ........................................##########..........
11-03  #10  ........................#####...............................
11-04  #99  ....................................##########..............
11-05  #99  .............................................##########.....
#+end_example

The  columns  are Date,  which  shows  the  month-day portion  of  the
relevant day; ID, which shows the  guard on duty that day; and Minute,
which shows the  minutes during which the guard was  asleep within the
midnight hour.  (The Minute column's  header shows the  minute's ten's
digit in the first  row and the one's digit in  the second row.) Awake
is shown as ., and asleep is shown as #.

Note that guards  count as asleep on the minute  they fall asleep, and
they count as  awake on the minute they wake  up. For example, because
Guard #10  wakes up  at 00:25  on 1518-11-01, minute  25 is  marked as
awake.

If you can figure out the guard most likely to be asleep at a specific
time, you  might be able to  trick that guard into  working tonight so
you can have  the best chance of sneaking in.  You have two strategies
for choosing the best guard/minute combination.

Strategy 1:  Find the  guard that  has the  most minutes  asleep. What
minute does that guard spend asleep the most?

In the example above, Guard #10 spent the most minutes asleep, a total
of 50 minutes (20+25+5), while Guard #99  only slept for a total of 30
minutes (10+10+10). Guard #10 was asleep most during minute 24 (on two
days, whereas any  other minute the guard was asleep  was only seen on
one day).

While this  example listed  the entries  in chronological  order, your
entries are in the order you  found them. You'll need to organize them
before they can be analyzed.

What is  the ID of  the guard you chose  multiplied by the  minute you
chose? (In the above example, the answer would be 10 * 24 = 240.)

#+begin_src fennel :session day04 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input
       ["[1518-11-01 00:00] Guard #10 begins shift"
        "[1518-11-01 00:05] falls asleep"
        "[1518-11-01 00:25] wakes up"
        "[1518-11-01 00:30] falls asleep"
        "[1518-11-01 00:55] wakes up"
        "[1518-11-01 23:58] Guard #99 begins shift"
        "[1518-11-02 00:40] falls asleep"
        "[1518-11-02 00:50] wakes up"
        "[1518-11-03 00:05] Guard #10 begins shift"
        "[1518-11-03 00:24] falls asleep"
        "[1518-11-03 00:29] wakes up"
        "[1518-11-04 00:02] Guard #99 begins shift"
        "[1518-11-04 00:36] falls asleep"
        "[1518-11-04 00:46] wakes up"
        "[1518-11-05 00:03] Guard #99 begins shift"
        "[1518-11-05 00:45] falls asleep"
        "[1518-11-05 00:55] wakes up"])

(fn read-log [lines]
  (let [res []]
    (each [_ line (ipairs lines)]
      (match (aoc.string-split line " ")
        [d t "Guard" g "begins" "shift"]
        (do (when (< 0 (# res)) (table.insert res -1))
            (table.insert res (tonumber (string.sub g 2))))
        [d t "falls" "asleep"]
        (table.insert res (tonumber (string.match t ":(%d%d)%]")))
        [d t "wakes" "up"]
        (table.insert res (tonumber (string.match t ":(%d%d)%]")))))
    (aoc.partition-at res -1)))

(fn process-log [logs]
  (let [res {}]
    (each [_ log (ipairs logs)]
      (let [cur (or (. res (. log 1)) [])]
        (for [i 2 (length log) 2]
          (lume.map (aoc.range-to (. log i) (- (. log (+ 1 i)) 1))
                    #(table.insert cur $)))
        (tset res (. log 1) cur)))
    res))

(fn max-frequency [xs]
  (let [ids (aoc.keys xs)
        res []]
    (each [_ id (ipairs ids)]
      (let [ys (aoc.frequency (. xs id))]
        (table.insert res [id (length (. xs id)) (. ys 1) (length ys)])))
    (table.sort res #(< (. $1 2) (. $2 2)))
    (* (. (. res (# res)) 1)
       (. (. res (# res)) 3))))

(fn solve [input]
  (table.sort input)
  (-> input
      (read-log)
      (process-log)
      (max-frequency)))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 240 test-input)

(solve (aoc.string-from "2018/04.inp"))
#+end_src

#+RESULTS:
: 84636


* DONE Day 4.2

Strategy 2:  Of all guards, which  guard is most frequently  asleep on
the same minute?

In the example  above, Guard #99 spent minute 45  asleep more than any
other guard or minute - three times in total. (In all other cases, any
guard spent any minute asleep at most twice.)

What is  the ID of  the guard you chose  multiplied by the  minute you
chose? (In the above example, the answer would be 99 * 45 = 4455.)

#+begin_src fennel :session day04 :exports both
(fn max-frequency2 [xs]
  (let [ids (aoc.keys xs)
        res []]
    (each [_ id (ipairs ids)]
      (let [ys (aoc.frequency (. xs id))]
        (table.insert res [id ys])))
    (table.sort res #(< (# (. $1 2)) (# (. $2 2))))
    (* (. (. res (# res)) 1)
       (. (. (. res (# res)) 2) 1))))

(fn solve2 [input]
  (table.sort input)
  (-> input
      (read-log)
      (process-log)
      (max-frequency2)))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 4455 test-input)

(solve2 (aoc.string-from "2018/04.inp"))
#+end_src

#+RESULTS:
: 91679

* DONE Day 5.1

You've  managed  to  sneak  in to  the  prototype  suit  manufacturing
lab. The  Elves are making  decent progress, but are  still struggling
with the suit's size reduction capabilities.

While the very latest in  1518 alchemical technology might have solved
their problem  eventually, you  can do better.  You scan  the chemical
composition of the  suit's material and discover that it  is formed by
extremely  long polymers  (one of  which is  available as  your puzzle
input).

The polymer  is formed by  smaller units which, when  triggered, react
with each  other such  that two  adjacent units of  the same  type and
opposite  polarity  are destroyed.  Units'  types  are represented  by
letters;  units'  polarity  is   represented  by  capitalization.  For
instance, r and R are units  with the same type but opposite polarity,
whereas r and s are entirely different types and do not react.

For example:
- In aA, a and A react, leaving nothing behind.
- In abBA, bB destroys itself, leaving aA. As above, this then
  destroys itself, leaving nothing.
- In abAB, no two adjacent units are of the same type, and so nothing
  happens.
- In aabAAB, even though aa and AA are of the same type, their
  polarities match, and so nothing happens.
  
Now, consider a larger example, dabAcCaCBAcCcaDA:

#+begin_example
dabAcCaCBAcCcaDA  The first 'cC' is removed.
dabAaCBAcCcaDA    This creates 'Aa', which is removed.
dabCBAcCcaDA      Either 'cC' or 'Cc' are removed (the result is the same).
dabCBAcaDA        No further actions can be taken.
#+end_example

After all possible reactions, the resulting polymer contains 10 units.

How many  units remain after  fully reacting the polymer  you scanned?
(Note:  in  this  puzzle  and  others, the  input  is  large;  if  you
copy/paste your input, make sure you get the whole thing.)

#+begin_src fennel :session day05 :exports both
(local lume (require :lib.lume))
(local aoc (require :lib.aoc))
(local test-input ["dabAcCaCBAcCcaDA"])

(fn react [xs j]
  (var done false)
  (if (= j (length xs)) xs
      (do (for [i j (# xs) &until done]
            (when (and (not= (. xs i) (. xs (- i 1)))
                       (or (= (string.upper (. xs i)) (. xs (- i 1)))
                           (= (string.lower (. xs i)) (. xs (- i 1)))))
              (table.remove xs i)
              (table.remove xs (- i 1))
              (set done i)))
          (react xs (if done (- done 1) (# xs))))))

(fn solve [input]
  (-> (. input 1)
      (aoc.string-toarray)
      (react 2)
      (length)))

(fn test [expected input]
  (assert (= expected (solve input))))

(test 10 test-input)

(solve (aoc.string-from "2018/05.inp"))
#+end_src

#+RESULTS:
: 11476


* DONE Day 5.2

Time to improve the polymer.

One of the unit types is causing problems; it's preventing the polymer
from collapsing as much as it should. Your goal is to figure out which
unit type  is causing the  most problems,  remove all instances  of it
(regardless  of  polarity), fully  react  the  remaining polymer,  and
measure its length.

For example, again using the polymer dabAcCaCBAcCcaDA from above:
- Removing all A/a units produces dbcCCBcCcD. Fully reacting this
  polymer produces dbCBcD, which has length 6.
- Removing all B/b units produces daAcCaCAcCcaDA. Fully reacting this
  polymer produces daCAcaDA, which has length 8.
- Removing all C/c units produces dabAaBAaDA. Fully reacting this
  polymer produces daDA, which has length 4.
- Removing all D/d units produces abAcCaCBAcCcaA. Fully reacting this
  polymer produces abCBAc, which has length 6.

In this example, removing all C/c units was best, producing the
answer 4.

What is the length of the shortest polymer you can produce by removing
all units of exactly one type and fully reacting the result?

#+begin_src fennel :session day05 :exports both
(fn solve2 [input]
  (let [line (. input 1)
        xs (aoc.string-toarray "abcdefghijklmnopqrstuvwxyz")]
    (aoc.math-min
     (icollect [_ x (ipairs xs)]
       (let [ys (string.gsub (string.gsub line x "") (string.upper x) "")]
         (length (react (aoc.string-toarray ys) 2)))))))

(fn test2 [expected input]
  (assert (= expected (solve2 input))))

(test2 4 test-input)

(solve2 (aoc.string-from "2018/05.inp"))
#+end_src

#+RESULTS:
: 5446
